name: Rasqberry Pi Image Release
permissions:
  contents: write      # allow commit/push of VERSION
  checks: write        # for status checks
  id-token: write      # for OIDC (cosign)
  packages: write      # for releases/assets
#concurrency:
  #group: ${{ github.workflow }}-${{ github.ref }}
  #cancel-in-progress: false # set true to cancel existing workflow runs when new run is triggered

on:
  workflow_dispatch: {}
  push:
    branches:
      - JRL-dev*
      - beta
    tags:
      - 'v*'


jobs:
  rasqberry-push-version-number:
    name: "Rasqberry: Push version number"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.current-version.outputs.version }}
      version_num: ${{ steps.update-version.outputs.version_num }}
    steps:
      - name: "Rasqberry: Clone Repository"
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Create Date
        id: create-date
        if: always()
        shell: bash
        run: |
          NOW="$(date +"%Y-%m-%d-%H%M%S")"
          echo "date=${NOW}" >> $GITHUB_OUTPUT
      - run: |
          echo "${{ steps.create-date.outputs.date }}"

      - name: "Rasqberry: Get current version"
        id: current-version
        shell: bash
        run: |
          version=$(cat ./VERSION)
          echo "version=${version}" >> $GITHUB_OUTPUT

      - run: |
          echo "${{ steps.current-version.outputs.version }}"

      # -------------------------------------------------------------------------
      # Versioning Scheme:
      # - If run on the 'main' branch, a semantic version MUST be provided via workflow input.
      # - If run on other branches without a provided version, an auto-generated version is created as:
      #     <branch-name>-<YYYY-MM-DD-HHMMSS>
      # - If a version is provided (on any branch), it is used directly.
      # The chosen version is written to `src/version` and used for tagging/releases.
      # -------------------------------------------------------------------------
      - name: "Rasqberry: Add version file"
        id: update-version
        if: ${{ steps.current-version.outputs.version != github.event.inputs.version }}
        shell: bash
        env:
          VERSION_INPUT: ${{ github.event.inputs.version }}
          CREATE_DATE: ${{ steps.create-date.outputs.date }}
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          # On 'main' branch, a semantic version must be provided
          if [ "$BRANCH_NAME" = "main" ]; then
            if [ -z "$VERSION_INPUT" ]; then
              echo "Error: On 'main' branch you must supply a semantic version via workflow inputs." >&2
              exit 1
            fi
            VERSION_NUMBER="$VERSION_INPUT"
          else
            if [ -n "$VERSION_INPUT" ]; then
              VERSION_NUMBER="$VERSION_INPUT"
            else
              # Use branch name and timestamp for non-main branches
              VERSION_NUMBER="${BRANCH_NAME}-${CREATE_DATE}"
            fi
          fi
          echo "version_num=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          echo "$VERSION_NUMBER" > ./VERSION

      - name: "Validate semantic version"
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: |
          echo "$VERSION_INPUT" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$' \
            || { echo "â›” Invalid semantic version: $VERSION_INPUT" >&2; exit 1; }
        
      - name: "Rasqberry: git add & commit & push"
        uses: EndBug/add-and-commit@v9
        with:
          add: "./VERSION"
          default_author: github_actions
          message: "Bump version to ${{ steps.update-version.outputs.version_num }}"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Tag only on 'main' branch with a 'v' prefix; otherwise tag without prefix
          tag: ${{ github.ref == 'refs/heads/main' && format('v{0} --force', steps.update-version.outputs.version_num) || format('{0} --force', steps.update-version.outputs.version_num) }}
          push: true
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'
      - name: Check install!
        run: cosign version

  release:
    name: Create Release
    needs: rasqberry-push-version-number
    runs-on: ubuntu-latest
    outputs:
      id: ${{ steps.create-release.outputs.id }}
#      date: ${{ steps.base-name.outputs.date }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: latest_tag
        shell: bash
        run: |
          echo "TAG_NAME=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_OUTPUT

      - run: |
          echo "${{ steps.latest_tag.outputs.TAG_NAME }}"      

      - name: Print branch details
        id: branch-details
        shell: bash
        run: |
          echo "branch_name=$(git branch --show-current)" >> $GITHUB_OUTPUT
      - run: |
          echo "${{ steps.branch-details.outputs.branch_name }}"

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v1
        id: changelog
        with:
          config: ./cliff-release.toml
          args: ${{ steps.latest_tag.outputs.TAG_NAME }}..HEAD

      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v2.2.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ github.ref == 'refs/heads/main' && format('rasqberry-v{0}', needs.rasqberry-push-version-number.outputs.version_num) || format('rasqberry-{0}', needs.rasqberry-push-version-number.outputs.version_num) }}
          tag_name: ${{ github.ref == 'refs/heads/main' && format('v{0}', needs.rasqberry-push-version-number.outputs.version_num) || needs.rasqberry-push-version-number.outputs.version_num }}
          body: ${{ steps.changelog.outputs.content }}
          make_latest: true

  build:
    name: Build Image
    needs: [release]
    runs-on: ubuntu-latest
    outputs:
      asset_path: ${{ steps.set-asset.outputs.asset_path }}
      asset_name: ${{ steps.set-asset.outputs.asset_name }}

    steps:
 
      - name: checkout repo
        uses: actions/checkout@v4

      - name: Start build with raspiconfig
        uses: usimd/pi-gen-action@v1
        id: pi-gen-build
        with:
          apt-proxy: ''
          compression: xz
          compression-level: 8
          disable-first-boot-user-rename: 1
          docker-opts: ''
          enable-noobs: false
          enable-ssh: 1
          export-last-stage-only: true
          extra-host-dependencies: ''
          extra-host-modules: ''
          github-token: ${{ secrets.GITHUB_TOKEN }}
          hostname: rasqberry
          image-name: 'rasqberry'
          increase-runner-disk-size: true
          keyboard-keymap: gb
          keyboard-layout: English (UK)
          locale: en_GB.UTF-8
          username: rasqberry
          password: 'Qiskit1!'
          pi-gen-dir: pi-gen
          pi-gen-release: RasQberry Two Release
          pi-gen-repository: RPi-Distro/pi-gen
          pi-gen-version: arm64
          pubkey-only-ssh: 0
          release: bookworm
          stage-list: stage0 stage1 stage2 stage3 stage4 ./stage-RQB2
          timezone: Europe/London
          verbose-output: true
          wpa-country: 'GB'
          wpa-essid: ''
          wpa-password: ''

      - name: Set dynamic asset path and name
        id: set-asset
        run: |
          mkdir -p deploy
          # Copy the image to the deploy folder
          cp "${{ steps.pi-gen-build.outputs.image-path }}" deploy/
          # Find the file dynamically in the 'deploy' directory
          FILE_PATH=$(find deploy -type f -name "*.img.xz" | head -n 1)
          FILE_NAME=$(basename "$FILE_PATH")
          echo "asset_path=$FILE_PATH" >> $GITHUB_OUTPUT
          echo "asset_name=$FILE_NAME" >> $GITHUB_OUTPUT
          cd deploy
          # Find all files in the directory and print their size and name
          find . -type f -printf "%s\t%f\n"

      - name: Clean upload URL
        id: clean-upload-url
        shell: bash
        run: |
          RAW_URL="${{ needs.release.outputs.upload_url }}"
          # Remove the template suffix
          CLEAN_URL="${RAW_URL%\{\?name,label\}}"
          echo "CLEAN_UPLOAD_URL=$CLEAN_URL" >> $GITHUB_ENV

      - name: Upload Release Asset to Target Repository
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.CLEAN_UPLOAD_URL }}
          asset_path: ${{ steps.set-asset.outputs.asset_path }}
          asset_name: ${{ steps.set-asset.outputs.asset_name }}
          asset_content_type: application/x-xz

