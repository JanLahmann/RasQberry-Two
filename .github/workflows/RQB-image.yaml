name: Rasqberry Pi Image Release

on:
   workflow_dispatch: {}
   push:
     branches:
       - 30-sw-platform-JRL-unified


jobs:
  rasqberry-push-version-number:
    name: "Rasqberry: Push version number"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.current-version.outputs.version }}
      version_num: ${{ steps.update-version.outputs.version_num }}
    steps:
      - name: "Rasqberry: Clone Repository"
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Create Date
        id: create-date
        if: always()
        shell: bash
        run: |
          NOW="$(date +"%Y-%m-%d-%H%M%S")"
          echo "date=${NOW}" >> $GITHUB_OUTPUT
      - run: |
          echo "${{ steps.create-date.outputs.date }}"

      - name: "Rasqberry: Get current version"
        id: current-version
        shell: bash
        run: |
          version=$(cat ./src/version)
          echo "version=${version}" >> $GITHUB_OUTPUT

      - run: |
          echo "${{ steps.current-version.outputs.version }}"

      - name: "Rasqberry: Add version file"
        id: update-version
        if: steps.current-version.outputs.version != github.event.inputs.version
        shell: bash
        run: |
          if [ -z ${{ github.event.inputs.version }} ]; then
            VERSION_NUMBER=alpha-${{ steps.create-date.outputs.date }}
            echo "version_num=$VERSION_NUMBER" >> $GITHUB_OUTPUT
            echo $VERSION_NUMBER > ./src/version
          else
            VERSION_NUMBER=${{ github.event.inputs.version }}
            echo "version_num=$VERSION_NUMBERn }}" >> $GITHUB_OUTPUT
            echo $VERSION_NUMBER > ./src/version
          fi

      - name: "Rasqberry: git add & commit & tag & push"
        uses: EndBug/add-and-commit@v9
        with:
          add: "./src/version"
          default_author: github_actions
          message: "Bump version to v${{ steps.update-version.outputs.version_num }}"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: "v${{ steps.update-version.outputs.version_num }} --force"
          tag_push: "--force"
          push: true
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'
      - name: Check install!
        run: cosign version

  release:
    name: Create Release
    needs: rasqberry-push-version-number
    runs-on: ubuntu-latest
    outputs:
      id: ${{ steps.create-release.outputs.id }}
#      date: ${{ steps.base-name.outputs.date }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: latest_tag
        shell: bash
        run: |
          echo "TAG_NAME=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_OUTPUT

      - run: |
          echo "${{ steps.latest_tag.outputs.TAG_NAME }}"      

      - name: Print branch details
        id: branch-details
        shell: bash
        run: |
          echo "branch_name=$(git branch --show-current)" >> $GITHUB_OUTPUT
      - run: |
          echo "${{ steps.branch-details.outputs.branch_name }}"

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v1
        id: changelog
        with:
          config: ./cliff-release.toml
          args: ${{ steps.latest_tag.outputs.TAG_NAME }}..HEAD

      - name: Create empty release
        id: create-release
        uses: softprops/action-gh-release@v2.2.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "rasqberry-v${{ needs.rasqberry-push-version-number.outputs.version_num }}"
          tag_name: v${{ needs.rasqberry-push-version-number.outputs.version_num }}
          body: ${{ steps.changelog.outputs.content }}
          make_latest: true
      - run: |
          echo "${{ steps.create-release.outputs.upload_url }}"

  build:
    name: Build Image
    needs: [release]
    runs-on: ubuntu-latest

    steps:
 
      - name: checkout repo
        uses: actions/checkout@v4

      - name: Start build with raspiconfig
        uses: usimd/pi-gen-action@v1
        id: pi-gen-build
        with:
          apt-proxy: ''
          compression: xz
          compression-level: 8
          disable-first-boot-user-rename: 1
          pi-gen-repository: RPi-Distro/pi-gen
          pi-gen-version: arm64
          docker-opts: ''
          enable-noobs: false
          enable-ssh: 1
          export-last-stage-only: true
          extra-host-dependencies: ''
          extra-host-modules: ''
          github-token: ${{ secrets.GITHUB_TOKEN }}
          hostname: raspberrypi
          image-name: 'rasqberry-two'
          increase-runner-disk-size: true
          keyboard-keymap: gb
          keyboard-layout: English (UK)
          locale: en_GB.UTF-8
          username: rasqberry
          password: 'Qiskit1!'
          pi-gen-release: Raspberry Pi Qiskit Release
          pubkey-only-ssh: 0
          stage-list: stage0 stage1 stage2 stage3 stage4 ./stage-RQB2
          timezone: Europe/London
          verbose-output: true

      - name: Set dynamic asset path and name
        run: |
          mkdir -p deploy
          # Copy the image to the deploy folder
          cp -r ${{ steps.pi-gen-build.outputs.image-path }} deploy/
          # Find the file dynamically in the 'deploy' directory
          FILE_PATH=$(find deploy -type f -name "*.img.xz" | head -n 1)
          FILE_NAME=$(basename "${{steps.pi-gen-build.outputs.image-path}}")
          echo "asset_path=$FILE_PATH" >> $GITHUB_ENV
          echo "asset_name=$FILE_NAME" >> $GITHUB_ENV
          cd deploy
          # Find all files in the directory and print their size and name
          find . -type f -printf "%s\t%f\n"

      - name: Upload Release Asset to Target Repository
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ env.asset_path }}
          asset_name: ${{ env.asset_name }}
          asset_content_type: application/x-xz
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
